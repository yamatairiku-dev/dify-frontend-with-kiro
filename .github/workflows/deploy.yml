name: Deploy Dify Workflow Frontend

on:
  push:
    branches:
      - main
      - develop
      - staging
  pull_request:
    branches:
      - main
      - develop

env:
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Test job - runs on all branches and PRs
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run type checking
        run: npm run type-check
        
      - name: Run linting
        run: npm run lint
        
      - name: Run unit tests
        run: npm run test -- --coverage
        
      - name: Run integration tests
        run: npm run test:integration
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          
  # Security scan job
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level=moderate
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
  # Build job - runs on main, develop, and staging branches
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/staging')
    
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Determine environment
        id: env
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "vite_mode=production" >> $GITHUB_OUTPUT
          elif [[ $GITHUB_REF == 'refs/heads/staging' ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "vite_mode=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "vite_mode=development" >> $GITHUB_OUTPUT
          fi
          
      - name: Build application
        run: npm run build:${{ steps.env.outputs.environment }}
        env:
          VITE_MODE: ${{ steps.env.outputs.vite_mode }}
          VITE_AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          VITE_AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          VITE_GITHUB_CLIENT_ID: ${{ secrets.GITHUB_CLIENT_ID }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          VITE_DIFY_API_BASE_URL: ${{ secrets.DIFY_API_BASE_URL }}
          VITE_OAUTH_REDIRECT_URI: ${{ secrets.OAUTH_REDIRECT_URI }}
          VITE_GIT_COMMIT: ${{ github.sha }}
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ steps.env.outputs.environment }}
          path: dist/
          retention-days: 30
          
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production
            VITE_MODE=${{ steps.env.outputs.vite_mode }}
            VITE_AZURE_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}
            VITE_AZURE_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}
            VITE_GITHUB_CLIENT_ID=${{ secrets.GITHUB_CLIENT_ID }}
            VITE_GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            VITE_DIFY_API_BASE_URL=${{ secrets.DIFY_API_BASE_URL }}
            VITE_OAUTH_REDIRECT_URI=${{ secrets.OAUTH_REDIRECT_URI }}
            VITE_GIT_COMMIT=${{ github.sha }}
            
  # Deploy to development
  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-development
          path: dist/
          
      - name: Deploy to development server
        run: |
          echo "Deploying to development environment..."
          # Add your deployment commands here
          # Example: rsync, AWS S3, etc.
          
  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/staging'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-staging
          path: dist/
          
      - name: Deploy to AWS S3 (Staging)
        if: env.AWS_S3_BUCKET_STAGING
        run: |
          aws s3 sync dist/ s3://${{ secrets.AWS_S3_BUCKET_STAGING }} --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Invalidate CloudFront (Staging)
        if: env.AWS_CLOUDFRONT_DISTRIBUTION_ID_STAGING
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID_STAGING }} --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          
  # Deploy to production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-production
          path: dist/
          
      - name: Deploy to AWS S3 (Production)
        if: env.AWS_S3_BUCKET_PRODUCTION
        run: |
          aws s3 sync dist/ s3://${{ secrets.AWS_S3_BUCKET_PRODUCTION }} --delete
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Invalidate CloudFront (Production)
        if: env.AWS_CLOUDFRONT_DISTRIBUTION_ID_PRODUCTION
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID_PRODUCTION }} --paths "/*"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          
      - name: Notify deployment success
        run: |
          echo "🚀 Production deployment completed successfully!"
          echo "Commit: ${{ github.sha }}"
          echo "Image: ${{ needs.build.outputs.image-tag }}"
          
  # Post-deployment health checks
  health-check:
    name: Post-Deployment Health Check
    runs-on: ubuntu-latest
    needs: [deploy-development, deploy-staging, deploy-production]
    if: always() && (needs.deploy-development.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    
    steps:
      - name: Determine deployment URL
        id: url
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "url=${{ secrets.PRODUCTION_URL }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "url=${{ secrets.STAGING_URL }}" >> $GITHUB_OUTPUT
          else
            echo "url=${{ secrets.DEVELOPMENT_URL }}" >> $GITHUB_OUTPUT
          fi
          
      - name: Wait for deployment
        run: sleep 30
        
      - name: Health check
        run: |
          for i in {1..5}; do
            if curl -f -s "${{ steps.url.outputs.url }}/health"; then
              echo "✅ Health check passed"
              exit 0
            fi
            echo "⏳ Waiting for deployment... (attempt $i/5)"
            sleep 10
          done
          echo "❌ Health check failed"
          exit 1
          
      - name: Performance check
        run: |
          # Basic performance check using curl
          response_time=$(curl -o /dev/null -s -w '%{time_total}' "${{ steps.url.outputs.url }}")
          echo "Response time: ${response_time}s"
          
          # Fail if response time is too high (> 5 seconds)
          if (( $(echo "$response_time > 5.0" | bc -l) )); then
            echo "❌ Performance check failed: Response time too high"
            exit 1
          fi
          
          echo "✅ Performance check passed"